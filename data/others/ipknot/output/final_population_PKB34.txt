romList,searchBy1,searchby2):

	for stem in range(len(fromList)):
		i,j,l = fromList[stem]
		if(i==searchBy1 and j==searchby2):
			return l
		# endif
	# endfor
	# for noneType avoiding
	return 0
# end function
def CoaxialStackingCalculation(seq, stemlength1, stemlength2, i, j, k, l):

    # Example:
    
    # L2 == 0:
    # ACGGaUUGUguCCGUAAUcACA
    # (((((.[[[[)))))...]]]]
    # Stack is AU,GC = -2.10
    
    # L2 == 1:
    # ACGGaUUGUgAuCCGUAAUcACA
    # (((((.[[[[:)))))...]]]]
    # Stack is AU,GC = -2.10    
     
    pair1 = seq[((i - 1) + stemlength1 - 1)] + seq[j - stemlength1]
    pair2 = seq[((k - 1) + stemlength2 - 1)] + seq[l - stemlength2]

    stack = pair1, pair2

    if stack in stack_dic:
        coaxialStacking = stack_dic[stack]
    else:
        coaxialStacking = 0.0

    return coaxialStacking
# end function

#===================================================================================
# Cao Chen 09 Energy Model
#===================================================================================
def CC09(pk_dic_cc09, stemList):
	pk_dic_cc09_result = {}
	entropies_dic, entropies_dic_L1, entropies_dic_L3 = {}, {}, {}    

	# Store entropy parameters in dictionary in format (s1, s2, l1, l3, l2)    
	entropies = open("CaoChenParameters.txt",'r')
	for line in entropies:
		i = line.split()
		quintet = int(i[0][3:]), int(i[1][3:]), int(i[2][3:]), int(i[3][3:]), int(i[4][3:])
		entropies_dic[quintet] = float(i[5][3:])

	# For long loops L1 > 7 nt AND L3 <= 7 nt 
	# Store entropy parameters in dictionary in format (s1, s2, 'long', l3, l2)
	entropies = open("CaoChenParameters_L1.txt",'r')
	for line in entropies:
		i = line.split()
		a_b = float(i[4][7:]), float(i[5][7:])
		quintet = int(i[0][3:]), int(i[1][3:]), 'long', int(i[2][3:]), int(i[3][3:])
		entropies_dic_L1[quintet] = a_b

	# For long loops L3 > 7 nt 
	# Store entropy parameters in dictionary in format (s1, s2, l1, 'long', l2)
	entropies = open("CaoChenParameters_L3.txt",'r')
	for line in entropies:
		i = line.split()
		a_b = float(i[4][7:]), float(i[5][7:])
		quintet = int(i[0][3:]), int(i[1][3:]), int(i[2][3:]), 'long', int(i[3][3:])
		entropies_dic_L3[quintet] = a_b

	for pk_stem in pk_dic_cc09:

		i, j, k, l = pk_stem[0], pk_stem[1], pk_stem[2], pk_stem[3]

		stemlength1 = pk_stem[4]
		stack_s1 = FindLength(stemList,i,j)
		energy_s1 = 0# stemList[stem1][3]        
		    
		stemlength2 = pk_stem[5]  
		stack_s2 = FindLength(stemList,k,l)
		energy_s2 = 0# stemList[stem2][3]    
		                        
		l1 = k - (i + stemlength1)
		l2 = (j - stemlength1 + 1) - (k + stemlength2)            
		l3 = (l - stemlength2) - j

		if stemlength1 > 10:
		    stemlength1 = 10
		if stemlength2 > 10:
		    stemlength2 = 10

		# In case configuration is not defined in virtual bond model
		entropy = 0.0

		if l1 <= 7 and l3 >= 1 and l3 <= 7:     
		    quintet = stemlength1, stemlength2, l1, l3, l2
		    if quintet in entropies_dic:
		        entropy = entropies_dic[quintet]
		    
		elif l1 <= 7 and l3 > 7:                 
		    quintet = stemlength1, stemlength2, l1, 'long', l2
		    if quintet in entropies_dic_L3:
		        a_b = entropies_dic_L3[quintet]
		        entropy = a_b[0] * math.log(l3) + a_b[1]
		        
		elif l1 > 7 and l3 >= 1 and l3 <= 7:     
		    quintet = stemlength1, stemlength2, 'long', l3, l2    
		    if quintet in entropies_dic_L1:
		        a_b = entropies_dic_L1[quintet]
		        entropy = a_b[0] * math.log(l1) + a_b[1]
		        
		elif l1 > 7 and l3 > 7:                 
		    quintet = stemlength1, stemlength2, l1, 'long', l2
		    if quintet in entropies_dic_L3:
		        a_b = entropies_dic_L3[quintet]
		        entropy = a_b[0] * math.log(l3) + a_b[1]

		    
		if entropy:
		    pk_energy = stack_s1 + stack_s2 - (0.62 * entropy)
		    if pk_energy < accEne:
		        pk_dic_cc09_result[stemlength2] = pk_energy #, stack_s1, stack_s2, l1, l3, l2, 0.62 * entropy
		    else:
		    	pk_dic_cc09_result[stemlength2] = pk_energy
	return pk_dic_cc09_result #, entropies_dic, entropies_dic_L1, entropies_dic_L3
#===================================================================================
# LongPK Energy Model
#===================================================================================
def LongPK(pk_dic_longpk, stemList, INIT, PENALTY):

    pk_dic_longpk_result = {}    

    for pk_stem in pk_dic_longpk:
        stemlength1 = pk_stem[4]
        i, j, k, l = pk_stem[0], pk_stem[1], pk_stem[2], pk_stem[3]
        i, j, k, l, stemlength1, stemlength2, l1, l2, l3 = pk_stem
        index = i, j, k, l, stemlength1, stemlength2, l1, l2, l3
        stack_s1 = FindLength(stemList,i,j)
                                                    
        stemlength2 = pk_stem[5]
        stack_s2 = FindLength(stemList,k,l)    
          
        l1 = k - (i + stemlength1)
        l2 = (j - stemlength1 + 1) - (k + stemlength2) 
        l3 = (l - stemlength2) - j

        looplength = l1 + l2 + l3        
      
        entropy = PENALTY*(looplength) + INIT
        # delG = wS1 + wS2 - delTLooplength
        pk_energy = stack_s1 + stack_s2 - entropy
      
        if pk_energy < accEne:            
            pk_dic_longpk_result[index] = pk_energy #, stack_s1, stack_s2, l1, l2, l3, entropy, looplength
                
    return pk_dic_longpk_result

#===================================================================================
# INN-HB energy model
#===================================================================================
def Turner(infoEnergy,sequence):
	# Energy calculation
	flag1 = 0   # Found au/gu penalty
	flag2 = 0   # Check if it is the first input
	flag3 = 0
	flag4 = 0
	total_energy = 0
	molecule_energy = {}
	energy = 0
	infoEnergy.sort()
	for i in range(len(infoEnergy)-1):
	    
	    if(infoEnergy[i][0]+1==infoEnergy[i+1][0]):
	        flag3 = 1
	        flag4 = 1
	        if (flag2 == 0 and ((sequence[infoEnergy[i][0]] == 'A') or (sequence[infoEnergy[i][0]] == 'U') or (sequence[infoEnergy[i][0]] == 'G' and sequence[infoEnergy[i][1]] == 'U') or (sequence[infoEnergy[i][0]]== 'U' and sequence[infoEnergy[i][1]] == 'G'))):
	            flag1 = 1
	            flag2 = 1
	            energy += .45
	            energy += CalculateEnergy(sequence[infoEnergy[i][0]], sequence[infoEnergy[i][1]], sequence[infoEnergy[i+1][0]], sequence[infoEnergy[i+1][1]])
	        else:
	            energy += CalculateEnergy(sequence[infoEnergy[i][0]], sequence[infoEnergy[i][1]], sequence[infoEnergy[i+1][0]], sequence[infoEnergy[i+1][1]])
	    else:
	        flag4 = 2
	        if(flag3==1):
	            if (((sequence[infoEnergy[i][0]] == 'A') or (sequence[infoEnergy[i][0]] == 'U') or (sequence[infoEnergy[i][0]] == 'G' and sequence[infoEnergy[i][1]] == 'U') or (sequence[infoEnergy[i][0]] == 'U' and sequence[infoEnergy[i][1]] == 'G'))):
	                energy += .45
	                energy += .43
	                energy += 4.09
	                total_energy += energy
	                flag2 = 0
	                flag1 = 0
	            else:
	                if(flag1==1):
	                    energy += .43
	                    energy += 4.09
	                    total_energy += energy
	                    flag2 = 0
	                    flag1 = 0
	                elif(flag1 != 1):
	                    energy += 4.09
	                    total_energy += energy
	                    flag2 = 0
	                    flag1 = 0
	                # Endifelse
	            flag3 = 0
	        #Endif
	    #Endelse
	#Endfor
	if (flag4 != 2):            
	    if (flag3 == 1):
	        if (((sequence[infoEnergy[len(infoEnergy)-1][0]] == 'A') or (sequence[infoEnergy[len(infoEnergy) - 1][0]] == 'U') or (sequence[infoEnergy[len(infoEnergy) - 1][0]] == 'G' and sequence[infoEnergy[len(infoEnergy) - 1][1]] == 'U') or (sequence[infoEnergy[len(infoEnergy) - 1][0]] == 'U' and sequence[infoEnergy[len(infoEnergy) - 1][1]] == 'G'))):
	            energy += .45
	            energy += .43
	            energy += 4.09
	            total_energy += energy
	            flag2 = 0
	            flag1 = 0
	        else:
	            if (flag1 == 1):
	                energy += .43
	                energy += 4.09
	                total_energy += energy
	                flag2 = 0
	                flag1 = 0
	            elif (flag1 != 1):
	                energy += 4.09
	                total_energy += energy
	                flag2 = 0
	                flag1 = 0
	        flag3 = 0
	        #Endif
	    #Endif
	# Endif
	return total_energy
# end function

def Turner04Handlar(basePairs,sequence):
	i,j,length = basePairs
	stem = []
	for left,right in zip